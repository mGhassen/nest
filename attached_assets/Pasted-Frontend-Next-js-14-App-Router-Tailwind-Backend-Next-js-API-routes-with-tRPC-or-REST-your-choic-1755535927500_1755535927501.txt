Frontend, Next.js 14 App Router, Tailwind

Backend, Next.js API routes with tRPC or REST, your choice

Database, PostgreSQL, Prisma ORM

Auth, Supabase Auth or NextAuth with email plus OAuth

Storage, Supabase Storage or S3 compatible

Queue and cron, Inngest or simple API cron

PDF generation, Playwright or pdfmake

File export, CSV via Papaparse server side

If you prefer NestJS or a separate backend service, you can swap later. The prompts still apply.

What we are building

Core modules for v1

Employees and roles, RBAC, audit log

Timesheets, weekly time entries, approvals, overtime, export

Leave management, leave policies, accruals, requests, calendar, approvals

Payroll hub, monthly cycles, earnings, deductions, employer contributions, payslips PDF, SEPA or CSV bank export

Documents, contracts, templates with placeholders, e-sign placeholder, versioning

Admin, org units, cost centers, locations, public holidays, work schedules

Settings, company profile, pay calendars, pay items catalog, email templates

Nice to have for v2

Performance reviews, expense claims, onboarding flows, asset tracking, multi-company

Minimal data model

Use Prisma with PostgreSQL. This covers v1.

// schema.prisma
model User {
  id            String   @id @default(uuid())
  email         String   @unique
  name          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  employee      Employee?
  memberships   Membership[]
  sessions      Session[]
  // auth provider tables if using NextAuth
}

model Company {
  id            String   @id @default(uuid())
  name          String
  countryCode   String   // e.g. "FR", "TN", "DE"
  currency      String   // e.g. "EUR", "TND"
  paySchedule   PaySchedule?  // default schedule
  locations     Location[]
  costCenters   CostCenter[]
  employees     Employee[]
  policies      LeavePolicy[]
  payItems      PayItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Membership {
  id         String   @id @default(uuid())
  userId     String
  companyId  String
  role       Role     // "OWNER", "ADMIN", "HR", "MANAGER", "EMPLOYEE"
  user       User     @relation(fields: [userId], references: [id])
  company    Company  @relation(fields: [companyId], references: [id])
  createdAt  DateTime @default(now())
}

enum Role {
  OWNER
  ADMIN
  HR
  MANAGER
  EMPLOYEE
}

model Employee {
  id             String   @id @default(uuid())
  companyId      String
  userId         String?  // optional if not portal-enabled
  firstName      String
  lastName       String
  email          String
  hireDate       DateTime
  terminationDate DateTime?
  employmentType String   // "FULL_TIME", "PART_TIME", "CONTRACTOR"
  managerId      String?
  positionTitle  String?
  locationId     String?
  costCenterId   String?
  baseSalary     Decimal? // monthly or yearly depending on paySchedule
  salaryPeriod   String?  // "MONTHLY" or "YEARLY"
  hourlyRate     Decimal?
  workScheduleId String?
  user           User?     @relation(fields: [userId], references: [id])
  company        Company   @relation(fields: [companyId], references: [id])
  timesheets     Timesheet[]
  leaveBalances  LeaveBalance[]
  contracts      Contract[]
  bankAccounts   BankAccount[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Location {
  id         String   @id @default(uuid())
  companyId  String
  name       String
  countryCode String
  timezone   String
  company    Company  @relation(fields: [companyId], references: [id])
}

model CostCenter {
  id         String   @id @default(uuid())
  companyId  String
  code       String
  name       String
  company    Company  @relation(fields: [companyId], references: [id])
}

model WorkSchedule {
  id         String   @id @default(uuid())
  companyId  String
  name       String
  weeklyHours Int      // e.g. 40
  // optional per-day hours JSON
}

model Timesheet {
  id          String   @id @default(uuid())
  employeeId  String
  weekStart   DateTime // Monday 00:00
  status      String   // "DRAFT", "SUBMITTED", "APPROVED", "REJECTED"
  submittedAt DateTime?
  approvedAt  DateTime?
  entries     TimesheetEntry[]
}

model TimesheetEntry {
  id           String   @id @default(uuid())
  timesheetId  String
  date         DateTime
  project      String?
  hours        Decimal  // 0 to 24
  notes        String?
}

model LeavePolicy {
  id           String   @id @default(uuid())
  companyId    String
  code         String   // "ANNUAL", "SICK", "UNPAID"
  name         String
  accrualRule  String   // JSON rule config
  unit         String   // "DAYS" or "HOURS"
  carryOverMax Decimal? // days
}

model LeaveBalance {
  id           String   @id @default(uuid())
  employeeId   String
  policyId     String
  periodStart  DateTime
  periodEnd    DateTime
  opening      Decimal
  accrued      Decimal
  taken        Decimal
  adjusted     Decimal
  closing      Decimal
}

model LeaveRequest {
  id           String   @id @default(uuid())
  employeeId   String
  policyId     String
  startDate    DateTime
  endDate      DateTime
  unit         String   // "DAYS" or "HOURS"
  quantity     Decimal
  status       String   // "DRAFT", "SUBMITTED", "APPROVED", "REJECTED", "CANCELLED"
  approverId   String?
  reason       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model PayItem {
  id         String   @id @default(uuid())
  companyId  String
  code       String   // "BASE", "OT", "BONUS", "MEAL_TICKETS", "CNSS", etc.
  name       String
  type       String   // "EARNING", "DEDUCTION", "CONTRIBUTION"
  formula    String?  // JS expression or template
  taxable    Boolean  @default(true)
  recurring  Boolean  @default(false)
}

model PayrollCycle {
  id          String   @id @default(uuid())
  companyId   String
  periodStart DateTime
  periodEnd   DateTime
  status      String   // "DRAFT", "CALCULATED", "APPROVED", "PAID"
  runs        PayrollRun[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PayrollRun {
  id            String   @id @default(uuid())
  cycleId       String
  employeeId    String
  gross         Decimal  @default(0)
  net           Decimal  @default(0)
  currency      String
  items         PayrollItem[]
  payslipUrl    String?
  generatedAt   DateTime?
}

model PayrollItem {
  id           String   @id @default(uuid())
  runId        String
  payItemId    String
  label        String
  amount       Decimal
}

model BankAccount {
  id           String   @id @default(uuid())
  employeeId   String
  iban         String
  bic          String?
  holderName   String
  primary      Boolean  @default(true)
}

model Contract {
  id           String   @id @default(uuid())
  employeeId   String
  title        String
  version      Int      @default(1)
  templateId   String?
  signedAt     DateTime?
  fileUrl      String?  // uploaded PDF
  variables    String?  // JSON key:value for template merge
}

model PaySchedule {
  id          String   @id @default(uuid())
  companyId   String
  cadence     String   // "MONTHLY", "BIWEEKLY", "WEEKLY"
  anchorDay   Int?     // for monthly, e.g. 25
}

model AuditLog {
  id          String   @id @default(uuid())
  companyId   String
  actorId     String?
  action      String
  entityType  String
  entityId    String
  before      String?  // JSON
  after       String?  // JSON
  createdAt   DateTime @default(now())
}

API surface, quick sketch

Auth, login, invite, magic link

Employees, CRUD, link user, assign schedule, set compensation

Timesheets, list by week, submit, approve, export CSV

Leave, request, approve, balance calc, calendar feed

Payroll, open cycle, calculate, approve, generate payslips, export bank CSV and journal CSV

Documents, upload, merge from template, versioning

Admin, holidays per location, pay items, schedules, cost centers

Audit, list and filter

Replit setup prompt

Copy and paste to Replit to create the repo and baseline.

Prompt 1, project bootstrap

Create a Next.js 14 App Router project named "payfitlite".
Add TypeScript, Tailwind, Prisma, PostgreSQL.
Add a Dockerfile for local PG or connect to Replit PostgreSQL if available.
Install zod, react-hook-form, @tanstack/react-table, date-fns, lucide-react, @uploadthing/react or Supabase client, pdf-lib or pdfmake, @microsoft/teams-js off, not needed.
Set up Prisma schema with the models I paste next and generate.
Create basic layout with a sidebar for modules, Employees, Timesheets, Leave, Payroll, Documents, Admin, Settings.
Add shadcn/ui components.


Prompt 2, paste the Prisma schema

Replace schema.prisma with the content I will paste, then run prisma migrate dev with an initial migration named init. Seed with one Company, one Admin user, one Employee.


Then paste the Prisma schema above.

Prompt 3, auth and RBAC

Set up Supabase Auth with email magic link. Store user in User table on first login. Create Membership with role ADMIN for the seeding admin and EMPLOYEE for normal invites.
Create server middleware that loads current Membership by subdomain or single-tenant for now.
Create an RBAC guard helper can(user, action, entity) that maps Role to permissions. Deny by default and log to AuditLog.


Prompt 4, UI shell and navigation

Add a responsive sidebar with icons and keyboard shortcuts, g for go, e for employees, t for timesheets, l for leave, p for payroll, d for documents, a for admin, s for settings. Add breadcrumb and search bar. Add light and dark mode toggle.


Prompt 5, Employees module

Create pages for Employees list, details, and create.
Fields: firstName, lastName, email, employmentType, manager, positionTitle, location, costCenter, baseSalary, salaryPeriod, hourlyRate, workSchedule, bank account.
Include bulk import CSV and sample template. Add filter by status and cost center. Add audit on create and update.


Prompt 6, Timesheets module

Implement weekly timesheets.
Views: My timesheet, Team approvals for managers, Admin overview.
Rules: hours per day, notes, submit, retract, approve, reject. Lock approved entries.
Add export CSV for a date range with columns employee, date, hours, project, cost center.
Add overtime calculation if hours over weeklyHours in WorkSchedule.


Prompt 7, Leave policies and balances

Implement LeavePolicy CRUD with code, name, unit, accrualRule JSON, carryOverMax. Provide a simple accrual engine that supports:
- Fixed monthly accrual, e.g. 1.83 days per month
- Grant on hire, e.g. 20 days
- Pro-rating by hire date
Compute LeaveBalance nightly via cron and also on demand.


Prompt 8, Leave requests

Create LeaveRequest flow: employee creates request, manager approves, HR override allowed. Update LeaveBalance.taken when approved. Provide calendar view per team and company. Integrate public holidays table per location and exclude from working days.


Prompt 9, Payroll items catalog

Implement PayItem catalog with types EARNING, DEDUCTION, CONTRIBUTION. Add common items: BASE, OVERTIME, BONUS, TAX, SOCIAL_CONTRIB, MEAL.
Allow formula as a JavaScript expression that receives context { employee, timesheetSummary, baseSalary, hours, policy, country } and returns a number. Sandboxed execution.


Prompt 10, Payroll cycles and runs

Implement PayrollCycle for a period with status changes. For each employee active in the period, create a PayrollRun.
Compute items using catalog formulas and simple country pack for TN and FR placeholders, only arithmetic, no legal advice.
Generate payslip PDF per run with a simple template: employer info, employee info, items table, gross, net, signature block. Store PDF in storage and link.
Provide exports: 
- Bank CSV, columns IBAN, Name, Amount, Reference
- Accounting CSV, journal lines per PayItem with cost center breakdown


Prompt 11, Contracts and documents

Add Contract templates with variables like {{employee.firstName}}, {{company.name}}, {{salary}}.
On create, merge template to PDF and store. Track versions and signedAt field. Stub an e-signature page that captures consent and timestamps.


Prompt 12, Admin basics

Add Admin pages for Company, Locations, WorkSchedules, CostCenters, Holidays, PaySchedule, Email templates. Allow import of public holidays per country via static JSON.


Prompt 13, Audit log

Create a generic AuditLog table writer. Wrap mutating API routes to capture before and after snapshots. Add an Admin UI to search by entity or actor.


Prompt 14, API layer

Expose REST or tRPC routers for all modules with input validation via zod. Add rate limiting per user for write endpoints. Return typed errors.


Prompt 15, seed script

Build a robust seed that creates:
- One Company "DemoCo" in country "TN", currency "TND"
- Locations Tunis and Sfax
- A 40-hour WorkSchedule
- An Admin user and 5 Employees with random data, 8 weeks of timesheets, a basic Annual Leave policy, and a PayrollCycle for the last month with payslips generated


Prompt 16, tests

Add Vitest for unit tests and Playwright for e2e. Write tests for:
- Timesheet submit and approve
- Leave accrual engine
- Payroll item formula evaluation
- RBAC guard
Use a test database and reset between runs.


Prompt 17, background jobs

Add a daily cron endpoint /api/cron/daily that:
- Recalculates leave balances for active employees
- Closes past due timesheets by auto-submitting drafts to prevent gaps
Protect it with a secret header.


Prompt 18, file exports and imports

Implement generic CSV import and export utilities with safe parsing, validations, and dry-run mode. Use them in Employees import and Timesheets export.


Prompt 19, environment and deployment

Provide .env.example with keys for DATABASE_URL, SUPABASE, STORAGE, NEXTAUTH, ENCRYPTION_KEY for formula sandbox salt.
Add scripts: dev, build, postinstall prisma generate, seed, test.


Prompt 20, productize and permissions

Add feature flags for v2 modules. Add field-level permissions in RBAC map, for example salary visible to HR, ADMIN, OWNER, and the employee themself. Hide sensitive fields from EMPLOYEE list view.

Country payroll rules

Payroll rules are location specific and change often. Keep your engine generic with pay items and formulas. Later you can add a “country pack” per country that encodes statutory items and rate tables in JSON. For now, deliver simple arithmetic placeholders.

Screens you should get after these prompts

Dashboard with widgets, pending approvals, upcoming leaves, payroll status

Employees list, create, detail with tabs Profile, Compensation, Documents, Activity

Timesheets, My week, Manager approvals, Admin overview with filters

Leave, policy setup, team calendar, request form

Payroll, open cycle, calculate button, review list of runs, export, generate payslips

Documents, templates and generated files

Admin, company setup pages and holidays

Quick copy blocks for Replit chat

Create sidebar and layout

Create a layout with a left sidebar and top bar using shadcn/ui and Tailwind. Sidebar items: Dashboard, Employees, Timesheets, Leave, Payroll, Documents, Admin, Settings. Active state and icons with lucide-react. Add keyboard shortcuts and a breadcrumb.


Timesheet weekly grid

Build a timesheet page with a Monday to Sunday grid. Each cell is a numeric input with 0 to 24 and step 0.25. Show weekly total and overtime. Add actions Save, Submit, Retract. On submit, lock editing. Persist with Prisma.


Leave calendar

Create a month calendar view that overlays approved and pending leaves per employee. Filter by team, location, and policy. Disable public holidays for the shown location.


Payroll run calculator

Implement a server action calculatePayroll(cycleId) that:
1. Loads employees active in cycle.
2. Sums approved timesheet hours.
3. Applies pay items. For BASE, if salaryPeriod is MONTHLY, prorate baseSalary by active days. For OVERTIME, multiply overtimeHours by hourlyRate * 1.25.
4. Persists PayrollRun and PayrollItem rows.
Return a summary per employee.


Payslip PDF

Using pdfmake, generate a payslip with employer info, employee info, period, items table with label and amount, totals gross and net, and a footer with "Generated by Payfitlite". Save to storage and store URL.


Contract templating

Create a tiny template engine that replaces {{variable}} in a text blob with values from the employee and company. Render to HTML, then to PDF with Playwright. Save file and add a Contract record.


Audit wrapper

Create a helper audit(entityType, entityId, action, before, after) that writes to AuditLog with actorId from session. Wrap all POST, PUT, DELETE handlers with it.


RBAC guard

Implement a can(role, action, entity) function with a simple permission map. Example: EMPLOYEE can read self employee, cannot read others. MANAGER can approve timesheets of direct reports. HR and ADMIN have broader rights. Use in server actions and protect UI conditionally.


CSV import

Add an Employees CSV import page. Validate columns: firstName, lastName, email, employmentType, location, costCenter, baseSalary, salaryPeriod. Support dry-run that reports errors without writing.


Cron endpoint

Add /api/cron/daily guarded by a header X-CRON-KEY. It recalculates leave balances and posts reminders for unsubmitted timesheets. Provide a script to call it locally.